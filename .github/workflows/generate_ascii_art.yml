name: Generate ASCII Art

on:
  schedule:
    - cron: '0 */4 * * *'  # 每4小时运行一次
  workflow_dispatch:

jobs:
  generate_art:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}

      - name: Create arts directory
        run: mkdir -p arts

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          pip install requests Pillow numpy

      - name: Generate ASCII Art
        run: |
          echo 'import requests
          from PIL import Image
          import numpy as np
          import io
          import random
          import uuid

          keywords = ["nature", "abstract", "city", "animals", "landscape", "people", "space"]

          def fetch_random_image(api_key):
              keyword = random.choice(keywords)
              response = requests.get(
                  f"https://api.pexels.com/v1/search?query={keyword}&per_page=30",
                  headers={"Authorization": f"Bearer {api_key}"}
              )
              if response.status_code == 200:
                  try:
                      data = response.json()
                      if "photos" in data and data["photos"]:
                          image_url = random.choice(data["photos"])["src"]["original"]
                          return image_url
                      else:
                          print("No photo data found, returning empty list.")
                          return None
                  except requests.exceptions.JSONDecodeError:
                      print("JSON decoding failed.")
                      return None
              else:
                  print(f"Request failed with status code: {response.status_code}")
                  return None

          def image_to_ascii(image_url):
              response = requests.get(image_url)
              response.raise_for_status()
              image = Image.open(io.BytesIO(response.content))
              original_width, original_height = image.size
              
              # Maintain aspect ratio
              aspect_ratio = original_width / original_height
              new_width = 100
              new_height = int(new_width / aspect_ratio)

              image = image.resize((new_width, new_height))
              image = image.convert("L")
              ascii_chars = "@%#*+=-:. "
              pixels = np.array(image)

              ascii_image = ""
              for row in pixels:
                  ascii_image += "".join([ascii_chars[pixel // 25] for pixel in row]) + "\n"
              return ascii_image

          api_key = "${{ secrets.PEXELS_API_KEY }}"
          image_url = fetch_random_image(api_key)
          
          if image_url:
              ascii_art = image_to_ascii(image_url)
              filename = f"arts/{uuid.uuid4()}.md"
              with open(filename, "w") as f:
                  f.write(ascii_art)
          else:
              print("Failed to retrieve image URL, skipping ASCII Art generation.")' > generate_ascii_art.py

          python generate_ascii_art.py

      - name: Commit ASCII Art to repository
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add arts/*.md
          git commit -m "Add generated ASCII Art" || echo "No changes to commit"
          git push