name: Generate ASCII Art (Randomized)

on:
  schedule:
    - cron: '0 * * * *'  # 每小时触发一次（注意：GitHub Actions 中 cron 使用 UTC 时间）
  workflow_dispatch:

jobs:
  generate_art:
    runs-on: ubuntu-latest

    steps:
      - name: 检查是否执行（随机决策）
        id: random_decision
        run: |
          # 随机延时 0 到 1800 秒（最多延时 30 分钟），使触发时间乱序
          sleep_time=$(( RANDOM % 1800 ))
          echo "随机延时 ${sleep_time} 秒……"
          sleep ${sleep_time}

          # 获取当前 UTC 小时（GitHub runner 的定时为 UTC）
          current_hour=$(date -u +'%H')
          echo "当前 UTC 小时为: ${current_hour}"

          # 强制在 UTC 00:00 和 UTC 12:00 运行（对应香港时间08:00和20:00）
          if [ "$current_hour" -eq "00" ] || [ "$current_hour" -eq "12" ]; then
            echo "处于强制执行时段，任务必定执行。"
            echo "proceed=true" >> $GITHUB_OUTPUT
          else
            # 其他时段随机决策，50% 几率执行
            random_val=$(( RANDOM % 2 ))
            if [ $random_val -eq 0 ]; then
              echo "随机决策：此次跳过任务执行。"
              echo "proceed=false" >> $GITHUB_OUTPUT
              # 退出后续步骤（注意：exit 0 意味着工作成功退出，不报错）
              exit 0
            else
              echo "随机决策：此次执行任务。"
              echo "proceed=true" >> $GITHUB_OUTPUT
            fi
          fi

      - name: 检出代码仓库
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}

      - name: 创建 arts 目录
        run: mkdir -p arts

      - name: 设置 Python 环境
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: 安装依赖包
        run: |
          pip install requests Pillow numpy beautifulsoup4

      - name: 复制 Wallhaven ASCII Art 脚本
        run: |
          echo '
          import os
          import requests
          from bs4 import BeautifulSoup
          from PIL import Image
          import numpy as np
          import io
          import random
          import uuid
          import time

          BASE_URL = "https://wallhaven.cc/random/"
          HEADERS = {
              "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36"
          }
          COMMON_EXTENSIONS = ["jpg", "png", "webp"]

          # 获取随机图片 URL
          def get_random_image_urls():
              response = requests.get(BASE_URL, headers=HEADERS)
              response.raise_for_status()
              soup = BeautifulSoup(response.text, "html.parser")
              preview_elements = soup.select("#thumbs ul li figure a.preview")
              image_urls = []
              for preview in preview_elements:
                  href = preview["href"]
                  image_id = href.split("/")[-1]
                  base_image_url = f"https://w.wallhaven.cc/full/{image_id[:2]}/wallhaven-{image_id}"
                  image_urls.append(base_image_url)
              return image_urls

          # 获取实际图片
          def fetch_image(image_base_url):
              for ext in COMMON_EXTENSIONS:
                  image_url = f"{image_base_url}.{ext}"
                  try:
                      response = requests.get(image_url, headers=HEADERS)
                      response.raise_for_status()
                      return response.content
                  except requests.exceptions.HTTPError:
                      print(f"尝试 {image_url} 失败，继续尝试下一个后缀...")
              print("所有后缀均尝试失败，跳过该图片。")
              return None

          # 将图片转换为 ASCII 艺术
          def image_to_ascii(image_data):
              image = Image.open(io.BytesIO(image_data)).convert("L")
              ascii_chars = "@%#*+=-:. "
              pixels = np.array(image)
              ascii_image = ""
              for row in pixels:
                  ascii_image += "".join([ascii_chars[min(pixel // 25, len(ascii_chars) - 1)] for pixel in row]) + "\n"
              return ascii_image

          # 保存 ASCII 艺术
          def save_ascii_art(ascii_art):
              if not os.path.exists("arts"):
                  os.makedirs("arts")
              timestamp = int(time.time())
              filename = f"arts/{timestamp}_{uuid.uuid4()}.md"
              with open(filename, "w") as f:
                  f.write(ascii_art)
              print(f"ASCII Art 已保存到 {filename}")

          # 主函数
          def main():
              image_urls = get_random_image_urls()
              if image_urls:
                  random.shuffle(image_urls)
                  for base_image_url in image_urls:
                      print(f"尝试获取图片 URL: {base_image_url}")
                      image_data = fetch_image(base_image_url)
                      if image_data:
                          ascii_art = image_to_ascii(image_data)
                          save_ascii_art(ascii_art)
                          break
                      else:
                          print("获取图像失败，尝试下一个图片 URL。")
              else:
                  print("未找到任何图片。")

          if __name__ == "__main__":
              main()
          ' > wallhaven_ascii_arts_random_noapi.py

      - name: 运行 Wallhaven ASCII Art 脚本
        if: steps.random_decision.outputs.proceed == 'true'
        run: python wallhaven_ascii_arts_random_noapi.py

      - name: 提交生成的 ASCII Art 到仓库
        if: steps.random_decision.outputs.proceed == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'Add generated ASCII Art'
          file_pattern: 'arts/*.md'
          branch: 'main'
          github_token: ${{ secrets.GITHUB_TOKEN }}
