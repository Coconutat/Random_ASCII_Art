name: Generate ASCII Art

on:
  schedule:
    - cron: '0 */4 * * *'  # 每4小时运行一次
  workflow_dispatch:

jobs:
  generate_art:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}

      - name: Create arts directory
        run: mkdir -p arts

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          pip install requests Pillow numpy beautifulsoup4

      - name: Copy Wallhaven ASCII Art script
        run: |
          echo '
          import os
          import requests
          from bs4 import BeautifulSoup
          from PIL import Image
          import numpy as np
          import io
          import random
          import uuid
          from datetime import datetime

          BASE_URL = "https://wallhaven.cc/random/"
          HEADERS = {
              "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36"
          }
          COMMON_EXTENSIONS = ["jpg", "png", "webp"]

          def get_random_image_urls():
              response = requests.get(BASE_URL, headers=HEADERS)
              response.raise_for_status()
              soup = BeautifulSoup(response.text, "html.parser")
              preview_elements = soup.select("#thumbs ul li figure a.preview")
              image_urls = []
              for preview in preview_elements:
                  href = preview["href"]
                  image_id = href.split("/")[-1]
                  base_image_url = f"https://w.wallhaven.cc/full/{image_id[:2]}/wallhaven-{image_id}"
                  image_urls.append(base_image_url)
              return image_urls

          def fetch_image(image_base_url):
              for ext in COMMON_EXTENSIONS:
                  image_url = f"{image_base_url}.{ext}"
                  try:
                      response = requests.get(image_url, headers=HEADERS)
                      response.raise_for_status()
                      return response.content
                  except requests.exceptions.HTTPError:
                      print(f"尝试 {image_url} 失败，继续尝试下一个后缀...")
              print("所有后缀均尝试失败，跳过该图片。")
              return None

          def image_to_ascii(image_data):
              image = Image.open(io.BytesIO(image_data)).convert("L")
              ascii_chars = "@%#*+=-:. "
              pixels = np.array(image)
              ascii_image = ""
              for row in pixels:
                  ascii_image += "".join([ascii_chars[min(pixel // 25, len(ascii_chars) - 1)] for pixel in row]) + "\\n"
              return ascii_image

          def save_ascii_art(ascii_art):
              if not os.path.exists("arts"):
                  os.makedirs("arts")
              filename = f"arts/{datetime.now().strftime("'%Y%m%d'")}_{uuid.uuid4()}.md"
              with open(filename, "w") as f:
                  f.write(ascii_art)
              print(f"ASCII Art 已保存到 {filename}")

          def main():
              image_urls = get_random_image_urls()
              if image_urls:
                  random.shuffle(image_urls)
                  for base_image_url in image_urls:
                      print(f"尝试获取图片 URL: {base_image_url}")
                      image_data = fetch_image(base_image_url)
                      if image_data:
                          ascii_art = image_to_ascii(image_data)
                          save_ascii_art(ascii_art)
                          break
                      else:
                          print("获取图像失败，尝试下一个图片 URL。")
              else:
                  print("未找到任何图片。")

          if __name__ == "__main__":
              main()
          ' > wallhaven_ascii_arts_random_noapi.py

      - name: Run Wallhaven ASCII Art script
        run: python wallhaven_ascii_arts_random_noapi.py

      - name: Commit ASCII Art to repository
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'Add generated ASCII Art'
          file_pattern: 'arts/*.md'
          branch: 'main'
          github_token: ${{ secrets.GITHUB_TOKEN }}